<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Muhammad Al Farizzi</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Muhammad Al Farizzi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 22 Jun 2024 15:17:50 +0700</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>What I Learn Today : PostgreSQL VACUUM</title>
            <link>http://localhost:1313/posts/what-i-learn-today-2/</link>
            <pubDate>Sat, 22 Jun 2024 15:17:50 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/what-i-learn-today-2/</guid>
            <description>Vacuum is a PostgreSQL command that can be used for garbage collection and analyze a database. Vacuum will do garbage-collection by visiting the pages and track the dead rows. Dead Rows can came from deleted rows of copied of updated rows. When you update a row, PostgreSQL does not overwrite the existing row. Instead it creates a copy of the row. This is very useful if transaction failed the old row remains intact.</description>
            <content type="html"><![CDATA[<p>Vacuum is a PostgreSQL command that can be used for garbage collection and analyze a database. Vacuum will do garbage-collection by visiting the pages and track the dead rows. Dead Rows can came from deleted rows of copied of updated rows. When you update a row, PostgreSQL does not overwrite the existing row. Instead it creates a copy of the row. This is very useful if transaction failed the old row  remains intact.</p>
<p>After Vacuum track the dead rows it marks them as free space that will be available for new rows because the free space not returned back to system and shrink the table size. for example:</p>
<ul>
<li>Number of rows: 35 and Table size: 35MB</li>
<li>Update all rows then table size become: 70MB (Update operation will copy rows)</li>
<li>Vacuum the table</li>
<li>Copied rows will be mark as free space but table size remains 70MB because the free space not returned back to system.
<img alt="PG Vacuum" src="../images/pg-vacuum.png"></li>
</ul>
<p>Vacuum can be run using manual and automatic way. For manual way you can run using <code>VACUUM my_table</code> command (check <code>\h vacuum</code> for detail), and automatic way is running by PostgreSQL tool called autovacuum, autovacuum will executed based on configuration in <code>postgresql.conf</code>, below are several common autovacuum configration</p>
<ul>
<li>autovacuum_naptime. determine the delay between one autovacuum and the next in minute.</li>
<li>autovacuum_vacuum_threshold. this determine how many updated/deleted rows must be exists to trigger autovacuum</li>
<li>autovacuum_vacuum_scale_factor. this determine percentage of updated/deleted rows to trigger autovacuum. so if <code>autovacuum_vacuum_scale_factor</code> is <code>0.2</code> it mean <code>50%</code> if your total rows is <code>100</code> then updated/deleted rows must be <code>50</code> to trigger auto vacuum.</li>
<li>autovacuum_vacuum_insert_threshold. this determine how much success <code>INSERT</code> operation must be executed in a database before able to trigger autovacuum.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What I Learn Today: PostgreSQL Transaction &amp; Locking Part 1</title>
            <link>http://localhost:1313/posts/what-i-learn-today-1/</link>
            <pubDate>Mon, 17 Jun 2024 19:00:09 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/what-i-learn-today-1/</guid>
            <description>Everything Is A Transaction Today i learned that everything in PostgreSQL runs inside a transaction. Even if you just send a simple query like SELECT * FROM table without explicitly beginning a transaction it is executed within a transaction under the hood. This approach leverages the concept of autocommit, where each individual statement is treated as a single transaction if no explicit transaction commands are given.
Behavior Of CURRENT_TIMESTAMP &amp;amp; NOW() I was very supprised to learn that CURRENT_TIMESTAMP &amp;amp; NOW() do not return the current timestamp.</description>
            <content type="html"><![CDATA[<h2 id="everything-is-a-transaction">Everything Is A Transaction</h2>
<p>Today i learned that everything in PostgreSQL runs inside a transaction. Even if you just send a simple query like <code>SELECT * FROM table</code> without explicitly beginning a transaction it is executed within a transaction under the hood. This approach leverages the concept of autocommit, where each individual statement is treated as a single transaction if no explicit transaction commands are given.</p>
<h2 id="behavior-of-current_timestamp--now">Behavior Of CURRENT_TIMESTAMP &amp; NOW()</h2>
<p>I was very supprised to learn that <code>CURRENT_TIMESTAMP</code> &amp; <code>NOW()</code> do not return the current timestamp. I discovered this behavior few days a go when my team encountered a bug related to data sorting based on <code>created_at</code> column. The issue arose because two data had identically <code>created_at</code> value.</p>
<p>After look up to a process where data is inserted i know that the process is executed in long-running transaction because it insert <code>N</code> data inside a loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  FOREACH <span style="color:#66d9ef">values</span> <span style="color:#66d9ef">as</span> v
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> x (<span style="color:#66d9ef">column</span>) <span style="color:#66d9ef">values</span> (v)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">END</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">COMMIT</span>;
</span></span></code></pre></div><p>The default value for <code>created_at</code> is <code>CURRENT_TIMESTAMP</code>, which means if no value provided for the column, it uses <code>CURRENT_TIMESTAMP</code>. However, <code>CURRENT_TIMESTAMP</code> returns the time when transaction started, causing multiple data to have the same <code>created_at</code>. Thus making it impossible to sort correctly.</p>
<h2 id="read-only-transaction">Read Only Transaction</h2>
<p>Read Only Transaction is a transaction mode where only read operations are allowed. This mode is useful to ensuring that the data is not modified during transaction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span> <span style="color:#66d9ef">TRANSACTION</span> <span style="color:#66d9ef">READ</span> <span style="color:#66d9ef">ONLY</span>;
</span></span><span style="display:flex;"><span> <span style="color:#75715e">-- operations
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>
</span></span></code></pre></div><h2 id="savepoint">Savepoint</h2>
<p>Savepoint is like a checkpoint in a game you can rollback to spesific savepoint and start from there onward. This is useful when you encountered error in your transaction and need to rollback to spesific point. Savepoint is short-lived state which means when you commit or abort the transaction you are unable to access savepoint after that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>SAVEPOINT one;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>SAVEPOINT two;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>SAVEPOINT three;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>; <span style="color:#75715e">-- this will error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ROLLBACK</span> <span style="color:#66d9ef">TO</span> SAVEPOINT three;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>
</span></span></code></pre></div><p>When you <code>ROLLBACK TO SAVEPOINT three</code> you still able to ROLLBACK again to savepoint one or two but if you <code>ROLLBACK TO SAVEPOINT two</code> you unable to <code>ROLLBACK</code> to savepoint three, because at that savepoint you are not execute <code>SAVEPOINT three</code> yet.</p>
<h2 id="ddls-transaction">DDLs Transaction</h2>
<p>DDL (Data Definition Language) is a command that use to define a database/table/schema/data type. Supprisingly DDL can also executed within a transaction. This is useful when you write long DDL and need to ensure all command is successfully executed.</p>
<h2 id="mvcc-multi-version-concurrency-control">MVCC (Multi Version Concurrency Control)</h2>
<p>MVCC (Multi Version Concurrency Control) is a mechanism to crete snapshot for each transaction session. this is useful to ensure many operations read same data wont block each other because they read they own snapshot, the snapshot always be updated when other transaction is committed as long your transaction isolation mode is not <code>REPEATABLE READ</code>.</p>
<h2 id="select-for-update">SELECT FOR UPDATE</h2>
<p><code>SELECT FOR UPDATE</code> is read operations that locks the row it reads. This very useful when you want to select a data and modify it at application level before update the data and this is very useful to prevent race condition when select &amp; update data because only one transaction session can hold the locks at one time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>
</span></span></code></pre></div><h2 id="select-for-share">SELECT FOR SHARE</h2>
<p><code>SELECT FOR SHARE</code> is read operations that locks what it reads different from <code>SELECT FOR UPDATE</code> where only one transaction session can hold the lock. <code>SELECT FOR SHARE</code> shares the lock among transaction session that run <code>SELECT FOR SHARE</code> command too but will prevent <code>UPDATE</code>, <code>DELETE</code>, and <code>SELECT FOR SHARE</code> operations from acquire the lock. This very useful to ensuring that the data is not modified while you read it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> x <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">SHARE</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> x <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">SHARE</span> <span style="color:#75715e">-- this query will success and get the row
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> x <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#75715e">-- this will waiting untill all select for share query release the lock
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="nowait">NOWAIT</h2>
<p>NOWAIT is an option when execute <code>SELECT FOR UPDATE</code> when use this option the query will return error when lock is not available. This is very useful when you wont wait for lock to be available.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- Imagine Trx 1 and 2 running simultaneously
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> NOWAIT;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> NOWAIT;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><p>Trx 2 wont wait for lock to be available and will return an error.</p>
<h2 id="skip-locked">SKIP LOCKED</h2>
<p>SKIP LOCKED is option used with <code>SELECT FOR UPDATE</code> to avoid waiting rows to become available. It skips locked rows and tries to lock next available rows.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- imagine you have 2 seat in a air plane, and 3 users want to book a seat. the request will run simultaneously
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> seats <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> SKIP LOCKED; <span style="color:#75715e">-- this will acquire lock for 1 one
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> seats <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> SKIP LOCKED; <span style="color:#75715e">-- this will skip locked row, and find another one
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> seats <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span> SKIP LOCKED; <span style="color:#75715e">-- this will skip locked row, and find another one
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><p>When the session tries to find available lock and not found, the query will return 0 rows and not considered as error.</p>
<h2 id="isolation-level">Isolation Level</h2>
<p>Isolation Level is the way PostgreSQL isolates one transaction from others, as we know the transaction will always get latest update of tables even if other transaction session commit the changes. This is very useful when you need to process a constrant snapshot, the isolation level consists of 3 types:</p>
<ul>
<li>READ COMMIITED, this is the default isoaltion level postgresql uses, transaction started with this isolation level will always get a latest update of tables even if the changes committed by another transaction session.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1 and 2 will run simultaneously
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">-- imagine you have 2 rows in tables
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">-- few moment before run second query (deletion of id 1 in proggress)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">DELETE</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><p>The second query in Trx 1 will return 1 because it get updated snapshot everytime changes happens in database</p>
<ul>
<li>REPEATABLE READ, when start a transaction using this level of isolation the transactiol will get constant snapshot and wont get latest update of snapshot when changes happens.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1 and 2 will run simultaneously
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">-- imagine you have 2 rows in tables
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span> <span style="color:#66d9ef">TRANSACTION</span> <span style="color:#66d9ef">ISOLATION</span> <span style="color:#66d9ef">LEVEL</span> <span style="color:#66d9ef">REPEATABLE</span> <span style="color:#66d9ef">READ</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">-- few moment before run second query (deletion of id 1 in proggress)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">BEGIN</span> <span style="color:#66d9ef">TRANSACTION</span> <span style="color:#66d9ef">ISOLATION</span> <span style="color:#66d9ef">LEVEL</span> <span style="color:#66d9ef">REPEATABLE</span> <span style="color:#66d9ef">READ</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">DELETE</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(id) <span style="color:#66d9ef">FROM</span> tables; <span style="color:#75715e">-- will return 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><p>second query in Trx 1 also return 2 because the transaction dont get an updated snapshot.</p>
<ul>
<li>READ UNCOMMITED, when a transaction is started using this isolation level postgresql silenty use <code>READ COMMITTED</code> level.</li>
</ul>
<h2 id="deadlock">Deadlock</h2>
<p>Deadlock is a condition where more than 1 transactions waiting for each other to release a locks.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- Trx 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Trx 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">BEGIN</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tables <span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">END</span>;
</span></span></code></pre></div><p>Imagine those transactions run simultaneously they will wait for each other to release locks which never happens, this condition will produced a deadlock error.</p>
<h2 id="advisory-locks">Advisory Locks</h2>
<p>Advisory Lock difference from Transaction Lock. Transaction Lock is locks a table rows while Advisory Lock is locks a number, locked number wont be released with END/ROLLBACK/COMMIT command because it is not part of transaction session. This is very useful when you want to implement election to determine which node going to be a leader.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> pg_advisory_lock(<span style="color:#ae81ff">1</span>); <span style="color:#75715e">-- will lock `1`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">SELECT</span> pg_advisory_lock(<span style="color:#ae81ff">1</span>); <span style="color:#75715e">-- will waiting for others to release the lock for `1`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> pg_try_advisory_lock(<span style="color:#ae81ff">1</span>); <span style="color:#75715e">-- will skip if `1` already locked by others
</span></span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RSA</title>
            <link>http://localhost:1313/posts/rsa/</link>
            <pubDate>Sat, 01 Jun 2024 14:15:17 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/rsa/</guid>
            <description>RSA (Rivest-Shamir-Adlema) is asymmetric encryption algorithm it works by encrypt plain message using public key, and decrypt using private key. public key can be shared amongs parties/services/client but the private key must be kept for server/message processor because encrypted message only can be decrypted by right pair private key, decryption will be failed if you try to decrypt message using wrong private key.
Below is example of private and public key</description>
            <content type="html"><![CDATA[<p>RSA (Rivest-Shamir-Adlema) is asymmetric encryption algorithm it works by encrypt plain message using public key, and decrypt using private key. public key can be shared amongs parties/services/client but the private key must be kept for server/message processor because encrypted message only can be decrypted by right pair private key, decryption will be failed if you try to decrypt message using wrong private key.</p>
<p><img alt="RSA" src="../images/rsa.png"></p>
<p>Below is example of private and public key</p>
<pre tabindex="0"><code class="language-pem" data-lang="pem">-----BEGIN RSA PRIVATE KEY-----
PRIVATE KEY EXAMPLE
-----END RSA PRIVATE KEY-----
</code></pre><pre tabindex="0"><code class="language-pem" data-lang="pem">-----BEGIN RSA PUBLIC KEY-----
PUBLIC KEY EXAMPLE
-----END RSA PUBLIC KEY-----
</code></pre><p>RSA can be used in any programming language, below is example using Go programming language</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/rand&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/rsa&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/sha256&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/x509&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/pem&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generatePrivateKey</span>() (<span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PrivateKey</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pk</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">GenerateKey</span>(<span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Reader</span>, <span style="color:#ae81ff">4096</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;err generate pk: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">privateKeyPem</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">EncodeToMemory</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">Block</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Type</span>:  <span style="color:#e6db74">&#34;RSA PRIVATE KEY&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Bytes</span>: <span style="color:#a6e22e">x509</span>.<span style="color:#a6e22e">MarshalPKCS1PrivateKey</span>(<span style="color:#a6e22e">pk</span>),
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;private.pem&#34;</span>, <span style="color:#a6e22e">privateKeyPem</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pk</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generatePublicKey</span>(<span style="color:#a6e22e">priv</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PrivateKey</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PublicKey</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">publicKeyPem</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">EncodeToMemory</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">Block</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Type</span>:  <span style="color:#e6db74">&#34;RSA PUBLIC KEY&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Bytes</span>: <span style="color:#a6e22e">x509</span>.<span style="color:#a6e22e">MarshalPKCS1PublicKey</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">priv</span>.<span style="color:#a6e22e">PublicKey</span>),
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;public.pem&#34;</span>, <span style="color:#a6e22e">publicKeyPem</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">priv</span>.<span style="color:#a6e22e">PublicKey</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">priv</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generatePrivateKey</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Err failed generate private key: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pub</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generatePublicKey</span>(<span style="color:#a6e22e">priv</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;Err failed generate public key: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#e6db74">&#34;plain message&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sha256</span>.<span style="color:#a6e22e">New</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rands</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Reader</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">encMsg</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">EncryptOAEP</span>(<span style="color:#a6e22e">hash</span>, <span style="color:#a6e22e">rands</span>, <span style="color:#a6e22e">pub</span>, <span style="color:#a6e22e">msg</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Failed encrypt message: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Enc message: %x \n&#34;</span>, <span style="color:#a6e22e">encMsg</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">DecryptOAEP</span>(<span style="color:#a6e22e">hash</span>, <span style="color:#a6e22e">rands</span>, <span style="color:#a6e22e">priv</span>, <span style="color:#a6e22e">encMsg</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Failed descrypt message: %s&#34;</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Dec message: %s \n&#34;</span>, <span style="color:#a6e22e">msg</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How This Blog Migrated to Cloudflare Pages</title>
            <link>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</link>
            <pubDate>Thu, 23 May 2024 15:17:17 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</guid>
            <description>Recently i&amp;rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx How This Blog Deployed and this cost me a lot 🥲. so i decide to move my blog to Cloudflare Pages (🎉🎉 Learn new thing). this how i do it.
Create Cloudflare Account Before start this journey you need to register new account using your email or you can sign in using apple account.</description>
            <content type="html"><![CDATA[<p>Recently i&rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx <a href="https://blog.alfarizzi.xyz/posts/how-this-blog-deployed/">How This Blog Deployed</a> and this cost me a lot 🥲. so i decide to move my blog to Cloudflare Pages (🎉🎉 Learn new thing). this how i do it.</p>
<h2 id="create-cloudflare-account">Create Cloudflare Account</h2>
<p><img alt="Register Cloudflare" src="../images/register-cloudflare.png"></p>
<p>Before start this journey you need to register new account using your email or you can sign in using apple account. You will received an email for email verication in your inbox.</p>
<h2 id="create-new-application">Create New Application</h2>
<p><img alt="Connect to Git" src="../images/connect-to-git.png"></p>
<p>Go to <code>Workers &amp; Pages</code> &gt; <code>Pages</code> &gt; <code>Connect to Git</code> then you will be directed to github/gitlab to configure the repos you that will you manage using cloudflare.</p>
<p><img alt="Select Orgs" src="../images/select-orgs.png"></p>
<p>then you will be redirected to page where you can create new application.</p>
<p><img alt="Create New Application" src="../images/create-new-app.png"></p>
<p>select repository you want to deploy, here i&rsquo;ll choose <code>blog</code> repo.
<img alt="Choose Repo" src="../images/choose-repo.png"></p>
<p>since this blog is built using <code>hugo</code> then choose <code>hugo</code> as framework preset and leave other option as default.
<img alt="Setting Build Configuration" src="../images/build-config.png"></p>
<p>then click <code>Save and Deploy</code> then deployment process will be started.</p>
<p><img alt="Deployment" src="../images/deployment.png"></p>
<p>if deployment process you will get random generated url that pointed to your deployed project in this you also can setting custom domain/subdomain for this.</p>
]]></content>
        </item>
        
        <item>
            <title>Nginx Notebook</title>
            <link>http://localhost:1313/posts/nginx-notebook/</link>
            <pubDate>Tue, 21 May 2024 20:38:13 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/nginx-notebook/</guid>
            <description>Basic Config events {} http { server { listen 80; root /var/www/html; index index.html index.php index.htm; location / { try_files $uri $uri/ $uri?args } } } Context Events Events context is used to determine how nginx will process incoming connections, for example
how many connection will be proceed in one time ? how many worker will be used to process incoming request ? whether all incoming connections will be processed at one time ?</description>
            <content type="html"><![CDATA[<h1 id="basic-config">Basic Config</h1>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
  server {
    listen 80;
    root /var/www/html;
    index index.html index.php index.htm;

    location / {
      try_files $uri $uri/ $uri?args
    }
  }
}
</code></pre><h1 id="context">Context</h1>
<h2 id="events">Events</h2>
<p>Events context is used to determine how nginx will process incoming connections, for example</p>
<ul>
<li>how many connection will be proceed in one time ?</li>
<li>how many worker will be used to process incoming request ?</li>
<li>whether all incoming connections will be processed at one time ?
and more. please read documentation below and search directives for <code>event</code> context.
<a href="https://nginx.org/en/docs/ngx_core_module.html#events">Event Context</a></li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf">worker_processes 4;
events {
  worker_connections &lt;number&gt;;
  use &lt;method&gt;; // select, poll, kqueue, rtsig, /dev/poll
  multi_accept &lt;on | off&gt;;
  accept_mutex &lt;on | off&gt;;
}
</code></pre><p>example above is very basic example how events context is used, below is explanation foreach directives:</p>
<ul>
<li>worker_connections determine how many connections each worker can accept. you need to pay attention to value of worker_processes directive, for example if worker_processes is 4 and worker_connections is 100 it mean nginx can accept 400 request simultaneously.</li>
<li>use determine the event processing model (method) to be used</li>
<li>multi_accept determine whether the workers will process the connections simultaneously or one by one.</li>
<li>accept_mutex determine whether the workers is allowed to process same connections, if the value is on it will prevent worker process same connection and when the value is of it will allow workers to process same connections that can lead to resource wasting.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How This Blog Deployed</title>
            <link>http://localhost:1313/posts/how-this-blog-deployed/</link>
            <pubDate>Sat, 18 May 2024 14:31:08 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-deployed/</guid>
            <description>AWS EC2 This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is t3.micro.
Nginx Under the hood, this blog using hugo, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using nginx with the configuration below:
events {} http { include mime.types; server { server_name &amp;lt;your domain&amp;gt;; location / { root &amp;lt;path to blog dir&amp;gt;/blog/public; index index.</description>
            <content type="html"><![CDATA[<h2 id="aws-ec2">AWS EC2</h2>
<p>This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is <code>t3.micro</code>.</p>
<h2 id="nginx">Nginx</h2>
<p>Under the hood, this blog using <code>hugo</code>, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using <code>nginx</code> with the configuration below:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
    include mime.types;

    server {
      server_name &lt;your domain&gt;;
      location / {
        root &lt;path to blog dir&gt;/blog/public;
        index index.html index.htm;
        try_files $uri $uri/ =404;
      }
  }
}
</code></pre><h2 id="ssh">SSH</h2>
<p>SSH (Secure Shell) is a protocol to send command to securely sending commands to a server. Imagine line store owner ask the employee to clean/close/repair the store.</p>
<h2 id="github-action">Github Action</h2>
<p>Github Action is CI/CD tools that help you automate your workflows like testing, build, and deployment. this blog leverage github action for deployment processs</p>
<h2 id="how-it-works">How it Works</h2>
<p>When i done write some posts, i need to run <code>hugo</code> command on my local machine to produce static files then push it to github repository, deployment workflow will run automatically when some changes is pushed to master branch. Deployment script will do <code>ssh</code> to my <code>aws ec2</code> instance and pull latest changes from master branch, below is full script for deployment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">Deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2 </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build &amp; Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">PRIVATE_KEY</span>: <span style="color:#ae81ff">${{secrets.SSH_PRIVATE_KEY}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">HOSTNAME</span>: <span style="color:#ae81ff">${{secrets.SSH_HOST}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">USER_NAME</span>: <span style="color:#ae81ff">${{secrets.SSH_USER_NAME}}</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;$PRIVATE_KEY&#34; &gt; private_key &amp;&amp; chmod 600 private_key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              cd blog &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              git pull origin master &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              sudo cp -r public &lt;path to blog&gt;/blog
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              &#39;</span>          
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
