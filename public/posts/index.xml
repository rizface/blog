<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Muhammad Al Farizzi</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Muhammad Al Farizzi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 23 May 2024 15:17:17 +0700</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How This Blog Migrated to Cloudflare Pages</title>
            <link>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</link>
            <pubDate>Thu, 23 May 2024 15:17:17 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</guid>
            <description>Recently i&amp;rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx How This Blog Deployed and this cost me a lot ðŸ¥². so i decide to move my blog to Cloudflare Pages (ðŸŽ‰ðŸŽ‰ Learn new thing). this how i do it.
Create Cloudflare Account Before start this journey you need to register new account using your email or you can sign in using apple account.</description>
            <content type="html"><![CDATA[<p>Recently i&rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx <a href="https://blog.alfarizzi.xyz/posts/how-this-blog-deployed/">How This Blog Deployed</a> and this cost me a lot ðŸ¥². so i decide to move my blog to Cloudflare Pages (ðŸŽ‰ðŸŽ‰ Learn new thing). this how i do it.</p>
<h2 id="create-cloudflare-account">Create Cloudflare Account</h2>
<p><img alt="Register Cloudflare" src="../images/register-cloudflare.png"></p>
<p>Before start this journey you need to register new account using your email or you can sign in using apple account. You will received an email for email verication in your inbox.</p>
<h2 id="create-new-application">Create New Application</h2>
<p><img alt="Connect to Git" src="../images/connect-to-git.png"></p>
<p>Go to <code>Workers &amp; Pages</code> &gt; <code>Pages</code> &gt; <code>Connect to Git</code> then you will be director to github/gitlab to configure the repos you that will you manage using cloudflare.</p>
<p><img alt="Select Orgs" src="../images/select-orgs.png"></p>
<p>then you will be redirected to page where you can create new application.</p>
<p><img alt="Create New Application" src="../images/create-new-app.png"></p>
<p>select repository you want to deploy, here i&rsquo;ll choose <code>blog</code> repo.
<img alt="Choose Repo" src="../images/choose-repo.png"></p>
<p>since this blog is built using <code>hugo</code> then choose <code>hugo</code> as framework preset and leave other option as default
<img alt="Setting Build Configuration" src="../images/build-config.png"></p>
<p>then click <code>Save and Deploy</code> then deployment process will be started.</p>
<p><img alt="Deployment" src="../images/deployment.png"></p>
<p>if deployment process you will get random generated url that pointed to your deployed project in this you also can setting custom domain/subdomain for this.</p>
]]></content>
        </item>
        
        <item>
            <title>Nginx Notebook</title>
            <link>http://localhost:1313/posts/nginx-notebook/</link>
            <pubDate>Tue, 21 May 2024 20:38:13 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/nginx-notebook/</guid>
            <description>Basic Config events {} http { server { listen 80; root /var/www/html; index index.html index.php index.htm; location / { try_files $uri $uri/ $uri?args } } } Context Events Events context is used to determine how nginx will process incoming connections, for example
how many connection will be proceed in one time ? how many worker will be used to process incoming request ? whether all incoming connections will be processed at one time ?</description>
            <content type="html"><![CDATA[<h1 id="basic-config">Basic Config</h1>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
  server {
    listen 80;
    root /var/www/html;
    index index.html index.php index.htm;

    location / {
      try_files $uri $uri/ $uri?args
    }
  }
}
</code></pre><h1 id="context">Context</h1>
<h2 id="events">Events</h2>
<p>Events context is used to determine how nginx will process incoming connections, for example</p>
<ul>
<li>how many connection will be proceed in one time ?</li>
<li>how many worker will be used to process incoming request ?</li>
<li>whether all incoming connections will be processed at one time ?
and more. please read documentation below and search directives for <code>event</code> context.
<a href="https://nginx.org/en/docs/ngx_core_module.html#events">Event Context</a></li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf">worker_processes 4;
events {
  worker_connections &lt;number&gt;;
  use &lt;method&gt;; // select, poll, kqueue, rtsig, /dev/poll
  multi_accept &lt;on | off&gt;;
  accept_mutex &lt;on | off&gt;;
}
</code></pre><p>example above is very basic example how events context is used, below is explanation foreach directives:</p>
<ul>
<li>worker_connections determine how many connections each worker can accept. you need to pay attention to value of worker_processes directive, for example if worker_processes is 4 and worker_connections is 100 it mean nginx can accept 400 request simultaneously.</li>
<li>use determine the event processing model (method) to be used</li>
<li>multi_accept determine whether the workers will process the connections simultaneously or one by one.</li>
<li>accept_mutex determine whether the workers is allowed to process same connections, if the value is on it will prevent worker process same connection and when the value is of it will allow workers to process same connections that can lead to resource wasting.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How This Blog Deployed</title>
            <link>http://localhost:1313/posts/how-this-blog-deployed/</link>
            <pubDate>Sat, 18 May 2024 14:31:08 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-deployed/</guid>
            <description>AWS EC2 This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is t3.micro.
Nginx Under the hood, this blog using hugo, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using nginx with the configuration below:
events {} http { include mime.types; server { server_name &amp;lt;your domain&amp;gt;; location / { root &amp;lt;path to blog dir&amp;gt;/blog/public; index index.</description>
            <content type="html"><![CDATA[<h2 id="aws-ec2">AWS EC2</h2>
<p>This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is <code>t3.micro</code>.</p>
<h2 id="nginx">Nginx</h2>
<p>Under the hood, this blog using <code>hugo</code>, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using <code>nginx</code> with the configuration below:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
    include mime.types;

    server {
      server_name &lt;your domain&gt;;
      location / {
        root &lt;path to blog dir&gt;/blog/public;
        index index.html index.htm;
        try_files $uri $uri/ =404;
      }
  }
}
</code></pre><h2 id="ssh">SSH</h2>
<p>SSH (Secure Shell) is a protocol to send command to securely sending commands to a server. Imagine line store owner ask the employee to clean/close/repair the store.</p>
<h2 id="github-action">Github Action</h2>
<p>Github Action is CI/CD tools that help you automate your workflows like testing, build, and deployment. this blog leverage github action for deployment processs</p>
<h2 id="how-it-works">How it Works</h2>
<p>When i done write some posts, i need to run <code>hugo</code> command on my local machine to produce static files then push it to github repository, deployment workflow will run automatically when some changes is pushed to master branch. Deployment script will do <code>ssh</code> to my <code>aws ec2</code> instance and pull latest changes from master branch, below is full script for deployment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">Deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2 </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build &amp; Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">PRIVATE_KEY</span>: <span style="color:#ae81ff">${{secrets.SSH_PRIVATE_KEY}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">HOSTNAME</span>: <span style="color:#ae81ff">${{secrets.SSH_HOST}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">USER_NAME</span>: <span style="color:#ae81ff">${{secrets.SSH_USER_NAME}}</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;$PRIVATE_KEY&#34; &gt; private_key &amp;&amp; chmod 600 private_key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              cd blog &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              git pull origin master &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              sudo cp -r public &lt;path to blog&gt;/blog
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              &#39;</span>          
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
