<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Muhammad Al Farizzi</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Muhammad Al Farizzi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 14:15:17 +0700</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>RSA</title>
            <link>http://localhost:1313/posts/rsa/</link>
            <pubDate>Sat, 01 Jun 2024 14:15:17 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/rsa/</guid>
            <description>RSA (Rivest-Shamir-Adlema) is asymmetric encryption algorithm it works by encrypt plain message using public key, and decrypt using private key. public key can be shared amongs parties/services/client but the private key must be kept for server/message processor because encrypted message only can be decrypted by right pair private key, decryption will be failed if you try to decrypt message using wrong private key.
Below is example of private and public key</description>
            <content type="html"><![CDATA[<p>RSA (Rivest-Shamir-Adlema) is asymmetric encryption algorithm it works by encrypt plain message using public key, and decrypt using private key. public key can be shared amongs parties/services/client but the private key must be kept for server/message processor because encrypted message only can be decrypted by right pair private key, decryption will be failed if you try to decrypt message using wrong private key.</p>
<p><img alt="RSA" src="../images/rsa.png"></p>
<p>Below is example of private and public key</p>
<pre tabindex="0"><code class="language-pem" data-lang="pem">-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
</code></pre><pre tabindex="0"><code class="language-pem" data-lang="pem">-----BEGIN RSA PUBLIC KEY-----
MIICCgKCAgEA09r9ouQfbGtKQ8izKcADVHoKs7e3wL0qpXazidQT/qF6kgdU/GIF
+beFVn4ZoVurxt7gow7BVLulyepUS/r6XmFXViBu44WKdcOL9wAtZbTNHmLbo9SW
y6zbsbfuJJPdA3KhTeE0HgagyTcU/icNLjqTZEDmE6B7huk/4u+TzU2AzLxvh6yW
fTj1RDeyc6AOy8hZxB6QAOW5Vr+7VahYUzIYgFZ/vmCS9Kp7B4OblVX7O+nxEelf
7s4NZOftwAqdLjgg4rOyVZp6m0C03IqtYAJ5L5vhEsa8GeQscJ1+Q6lQ0W6MGZ/8
QG2hZmFtHpytq2wlUovYqs3u62VtMRqQRVxg2XuWSfV/wh4FZmH/y0EiD2PJ0GyI
V9eGc1wsKl3fyYxTayC7CU8sfh6DD9V7dzwmXdo/ZRmWmjrjfZg8dzo9rvtegwUd
83IqZcGaSrEjOrNyZ1ai+KRTzbT2QMQiDSJTYZjQ4ht8u93tTt3dtbDyVVUHFs9o
qoA0J9Fuj4/Or75sP39y64Y+U9FozKfBKPdkVcvHwHuI3qhIgv2Q1/zBepLEYpLd
yuinusfFE7mEYVzkWqDMhaCpCk87HiHZJm4XbeaaFX4wTQYIZDgP38qFO43ttqio
j0dhDSDZrBbCTErq8cfhe2X6jsNJdd/BKjiZdM8cg0MUriohpLmhlysCAwEAAQ==
-----END RSA PUBLIC KEY-----
</code></pre><p>RSA can be used in any programming language, below is example using Go programming language</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/rand&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/rsa&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/sha256&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/x509&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/pem&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generatePrivateKey</span>() (<span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PrivateKey</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pk</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">GenerateKey</span>(<span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Reader</span>, <span style="color:#ae81ff">4096</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;err generate pk: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">privateKeyPem</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">EncodeToMemory</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">Block</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Type</span>:  <span style="color:#e6db74">&#34;RSA PRIVATE KEY&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Bytes</span>: <span style="color:#a6e22e">x509</span>.<span style="color:#a6e22e">MarshalPKCS1PrivateKey</span>(<span style="color:#a6e22e">pk</span>),
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;private.pem&#34;</span>, <span style="color:#a6e22e">privateKeyPem</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pk</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generatePublicKey</span>(<span style="color:#a6e22e">priv</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PrivateKey</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">PublicKey</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">publicKeyPem</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">EncodeToMemory</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pem</span>.<span style="color:#a6e22e">Block</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Type</span>:  <span style="color:#e6db74">&#34;RSA PUBLIC KEY&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Bytes</span>: <span style="color:#a6e22e">x509</span>.<span style="color:#a6e22e">MarshalPKCS1PublicKey</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">priv</span>.<span style="color:#a6e22e">PublicKey</span>),
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;public.pem&#34;</span>, <span style="color:#a6e22e">publicKeyPem</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">priv</span>.<span style="color:#a6e22e">PublicKey</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">priv</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generatePrivateKey</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Err failed generate private key: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pub</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generatePublicKey</span>(<span style="color:#a6e22e">priv</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;Err failed generate public key: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#e6db74">&#34;plain message&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sha256</span>.<span style="color:#a6e22e">New</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rands</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Reader</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">encMsg</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">EncryptOAEP</span>(<span style="color:#a6e22e">hash</span>, <span style="color:#a6e22e">rands</span>, <span style="color:#a6e22e">pub</span>, <span style="color:#a6e22e">msg</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Failed encrypt message: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Enc message: %x \n&#34;</span>, <span style="color:#a6e22e">encMsg</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">rsa</span>.<span style="color:#a6e22e">DecryptOAEP</span>(<span style="color:#a6e22e">hash</span>, <span style="color:#a6e22e">rands</span>, <span style="color:#a6e22e">priv</span>, <span style="color:#a6e22e">encMsg</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Failed descrypt message: %s&#34;</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Dec message: %s \n&#34;</span>, <span style="color:#a6e22e">msg</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How This Blog Migrated to Cloudflare Pages</title>
            <link>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</link>
            <pubDate>Thu, 23 May 2024 15:17:17 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-migrated-to-cloudflare-pages/</guid>
            <description>Recently i&amp;rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx How This Blog Deployed and this cost me a lot 🥲. so i decide to move my blog to Cloudflare Pages (🎉🎉 Learn new thing). this how i do it.
Create Cloudflare Account Before start this journey you need to register new account using your email or you can sign in using apple account.</description>
            <content type="html"><![CDATA[<p>Recently i&rsquo;ve learn nginx for my freelance project this provoked me to learn a little further about nginx. After learn some topics about nginx i decide to make this blog and deploy it using AWS EC2 instance and Nginx <a href="https://blog.alfarizzi.xyz/posts/how-this-blog-deployed/">How This Blog Deployed</a> and this cost me a lot 🥲. so i decide to move my blog to Cloudflare Pages (🎉🎉 Learn new thing). this how i do it.</p>
<h2 id="create-cloudflare-account">Create Cloudflare Account</h2>
<p><img alt="Register Cloudflare" src="../images/register-cloudflare.png"></p>
<p>Before start this journey you need to register new account using your email or you can sign in using apple account. You will received an email for email verication in your inbox.</p>
<h2 id="create-new-application">Create New Application</h2>
<p><img alt="Connect to Git" src="../images/connect-to-git.png"></p>
<p>Go to <code>Workers &amp; Pages</code> &gt; <code>Pages</code> &gt; <code>Connect to Git</code> then you will be directed to github/gitlab to configure the repos you that will you manage using cloudflare.</p>
<p><img alt="Select Orgs" src="../images/select-orgs.png"></p>
<p>then you will be redirected to page where you can create new application.</p>
<p><img alt="Create New Application" src="../images/create-new-app.png"></p>
<p>select repository you want to deploy, here i&rsquo;ll choose <code>blog</code> repo.
<img alt="Choose Repo" src="../images/choose-repo.png"></p>
<p>since this blog is built using <code>hugo</code> then choose <code>hugo</code> as framework preset and leave other option as default.
<img alt="Setting Build Configuration" src="../images/build-config.png"></p>
<p>then click <code>Save and Deploy</code> then deployment process will be started.</p>
<p><img alt="Deployment" src="../images/deployment.png"></p>
<p>if deployment process you will get random generated url that pointed to your deployed project in this you also can setting custom domain/subdomain for this.</p>
]]></content>
        </item>
        
        <item>
            <title>Nginx Notebook</title>
            <link>http://localhost:1313/posts/nginx-notebook/</link>
            <pubDate>Tue, 21 May 2024 20:38:13 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/nginx-notebook/</guid>
            <description>Basic Config events {} http { server { listen 80; root /var/www/html; index index.html index.php index.htm; location / { try_files $uri $uri/ $uri?args } } } Context Events Events context is used to determine how nginx will process incoming connections, for example
how many connection will be proceed in one time ? how many worker will be used to process incoming request ? whether all incoming connections will be processed at one time ?</description>
            <content type="html"><![CDATA[<h1 id="basic-config">Basic Config</h1>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
  server {
    listen 80;
    root /var/www/html;
    index index.html index.php index.htm;

    location / {
      try_files $uri $uri/ $uri?args
    }
  }
}
</code></pre><h1 id="context">Context</h1>
<h2 id="events">Events</h2>
<p>Events context is used to determine how nginx will process incoming connections, for example</p>
<ul>
<li>how many connection will be proceed in one time ?</li>
<li>how many worker will be used to process incoming request ?</li>
<li>whether all incoming connections will be processed at one time ?
and more. please read documentation below and search directives for <code>event</code> context.
<a href="https://nginx.org/en/docs/ngx_core_module.html#events">Event Context</a></li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf">worker_processes 4;
events {
  worker_connections &lt;number&gt;;
  use &lt;method&gt;; // select, poll, kqueue, rtsig, /dev/poll
  multi_accept &lt;on | off&gt;;
  accept_mutex &lt;on | off&gt;;
}
</code></pre><p>example above is very basic example how events context is used, below is explanation foreach directives:</p>
<ul>
<li>worker_connections determine how many connections each worker can accept. you need to pay attention to value of worker_processes directive, for example if worker_processes is 4 and worker_connections is 100 it mean nginx can accept 400 request simultaneously.</li>
<li>use determine the event processing model (method) to be used</li>
<li>multi_accept determine whether the workers will process the connections simultaneously or one by one.</li>
<li>accept_mutex determine whether the workers is allowed to process same connections, if the value is on it will prevent worker process same connection and when the value is of it will allow workers to process same connections that can lead to resource wasting.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How This Blog Deployed</title>
            <link>http://localhost:1313/posts/how-this-blog-deployed/</link>
            <pubDate>Sat, 18 May 2024 14:31:08 +0700</pubDate>
            
            <guid>http://localhost:1313/posts/how-this-blog-deployed/</guid>
            <description>AWS EC2 This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is t3.micro.
Nginx Under the hood, this blog using hugo, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using nginx with the configuration below:
events {} http { include mime.types; server { server_name &amp;lt;your domain&amp;gt;; location / { root &amp;lt;path to blog dir&amp;gt;/blog/public; index index.</description>
            <content type="html"><![CDATA[<h2 id="aws-ec2">AWS EC2</h2>
<p>This blog is deployed using aws ec2 instance. AWS EC2 instance is a web service that provides sizeable compute capicity in the clouds. instance type for ths blog is <code>t3.micro</code>.</p>
<h2 id="nginx">Nginx</h2>
<p>Under the hood, this blog using <code>hugo</code>, a website generator that produces static files (HTML, CSS, JS) for the final result. these files are served using <code>nginx</code> with the configuration below:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">events {}

http {
    include mime.types;

    server {
      server_name &lt;your domain&gt;;
      location / {
        root &lt;path to blog dir&gt;/blog/public;
        index index.html index.htm;
        try_files $uri $uri/ =404;
      }
  }
}
</code></pre><h2 id="ssh">SSH</h2>
<p>SSH (Secure Shell) is a protocol to send command to securely sending commands to a server. Imagine line store owner ask the employee to clean/close/repair the store.</p>
<h2 id="github-action">Github Action</h2>
<p>Github Action is CI/CD tools that help you automate your workflows like testing, build, and deployment. this blog leverage github action for deployment processs</p>
<h2 id="how-it-works">How it Works</h2>
<p>When i done write some posts, i need to run <code>hugo</code> command on my local machine to produce static files then push it to github repository, deployment workflow will run automatically when some changes is pushed to master branch. Deployment script will do <code>ssh</code> to my <code>aws ec2</code> instance and pull latest changes from master branch, below is full script for deployment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">Deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2 </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build &amp; Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">PRIVATE_KEY</span>: <span style="color:#ae81ff">${{secrets.SSH_PRIVATE_KEY}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">HOSTNAME</span>: <span style="color:#ae81ff">${{secrets.SSH_HOST}}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">USER_NAME</span>: <span style="color:#ae81ff">${{secrets.SSH_USER_NAME}}</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;$PRIVATE_KEY&#34; &gt; private_key &amp;&amp; chmod 600 private_key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              cd blog &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              git pull origin master &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              sudo cp -r public &lt;path to blog&gt;/blog
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              &#39;</span>          
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
